What happens when you initialize a repository? Why do you need to do it?



	In order for Git to keep track of all the files in a directory, we have

	to initalize a repsitory first. Doing that, Git creates a hidden file

	'.git' where it stores all the metadeta needed for version control.



How is the staging area different from the working directory and the repository?

What value do you think it offers?



	The staging area represents an intermediate between the working directory

	and the repository. It allows you more accurate control over which files

	you eventually want to commit, since you don't have to commit all files

	in the working directory. Some files may be left as 'untracked', since

	you haven't finished working on them yet and thus don't want to include

	them in the commit (one commit per logical change!).



How can you use the staging area to make sure you have one commit per logical

change?



	Since the Staging Area is used as an intermediate between the respository

	and the working directory, only the modified local files that have been staged

	first are ready to be commited. Changes made to the local files that weren't

	staged are ignored and not put in the repository when commiting.



What are some situations when branches would be helpful in keeping your history

organized? How would branches help?



	If you want to change something that you don't want to have on the

	master branch (the original version), like an experimental feature,

	you can check out to another labeled branch and commit the work you made

	on that new feature there, while always be able to switch back to the 

	master branch (without those features) if you need to.



How do the diagrams help you visualize the branch structure?



	The diagrams help to visualize at what point in time, i.e. after which

	commit of the master branch, new branches were created and how many

	commits they include on their own. Thus, you get a visual impression

	of the different branches that coexist at once and how far each has already

	reached out.



What is the result of merging two branches together? Why do we represent it in

the diagram the way we do?



    The result is a new commit that points to the tip of the branch merged

    into (often master). All past commits from the merging branches are now

    avaialable through the branch that the changes were merged into. Thus we

    can delete the "old" branch (i.e. the label, like "coins").

  



What are the pros and cons of Git’s automatic merging vs. always doing merges

manually?



    It's a fairly tedious task to merge everything always by hand instead of

    let Git do the merging for you. If Git comes across a conflict it can't

    resolve it will let the user know anyway.

    

    The disadvantage might be, that, like in the example, code could be abstracted

    away (e.g. into a function) in one version and left as it was in another version.

    This might cause problems, thus it's generally I good idea that the contributors

    concerned talk to each other and sort things out together.